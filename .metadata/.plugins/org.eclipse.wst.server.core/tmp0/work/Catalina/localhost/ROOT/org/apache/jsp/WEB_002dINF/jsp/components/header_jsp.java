/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-12-06 09:05:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.components;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      components.ComponentsMthod cMgr = null;
      cMgr = (components.ComponentsMthod) _jspx_page_context.getAttribute("cMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (cMgr == null){
        cMgr = new components.ComponentsMthod();
        _jspx_page_context.setAttribute("cMgr", cMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');

	String userId = (String) session.getAttribute("idKeyS");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>header</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write(" <header>\r\n");
      out.write("      <div class=\"headTop\">\r\n");
      out.write("        <div class=\"frame\">\r\n");
      out.write("          <ul class=\"topGnb\">\r\n");
      out.write("            <li class=\"on\"><a href=\"/\">HOME</a></li>\r\n");
      out.write("            <li>\r\n");
      out.write("              <a href=\"/shop/shop01?category=국내도서\">국내도서</a>\r\n");
      out.write("              <div class=\"underNav\">국내도서underNav</div>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li>\r\n");
      out.write("              <a href=\"/shop/shop01?category=해외도서\">해외도서</a>\r\n");
      out.write("              <div class=\"underNav\">해외도서underNav</div>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li>\r\n");
      out.write("              <a href=\"/shop/shop01?category=eBook\">eBook</a>\r\n");
      out.write("              <div class=\"underNav\">eBookunderNav</div>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li>\r\n");
      out.write("              <a href=\"/choice/choice01\">추천도서</a>\r\n");
      out.write("              <div class=\"underNav\">중고매장underNav</div>\r\n");
      out.write("            </li>\r\n");
      out.write("            <li>\r\n");
      out.write("              <a href=\"/board/board01\">커뮤니티</a>\r\n");
      out.write("              <div class=\"underNav\">커뮤니티underNav</div>\r\n");
      out.write("            </li>\r\n");
      out.write("          </ul>\r\n");
      out.write("          <ul class=\"userBar\">\r\n");
      out.write("          	");

          	if(userId==null){
          		
      out.write("\r\n");
      out.write("	            <li><a href=\"/login/login01\">로그인</a></li>\r\n");
      out.write("	            <li><a href=\"/signup/signup01\">회원가입</a></li>\r\n");
      out.write("	            <li>\r\n");
      out.write("	              <a href=\"/login/login01\">\r\n");
      out.write("	                마이페이지\r\n");
      out.write("	                <span class=\"arrow\"></span>\r\n");
      out.write("	              </a>\r\n");
      out.write("	              <ul class=\"myPageList\">\r\n");
      out.write("	                <li><a href=\"/login/login01\">구매목록</a></li>\r\n");
      out.write("	                <li><a href=\"/login/login01\">취소/반품내역</a></li>\r\n");
      out.write("	                <li><a href=\"/login/login01\">회원정보수정</a></li>\r\n");
      out.write("	                <li><a href=\"/login/login01\">내가 쓴 글</a></li>\r\n");
      out.write("	                <li><a href=\"/login/login01\">장바구니/관심목록</a></li>\r\n");
      out.write("	              </ul>\r\n");
      out.write("	            </li>\r\n");
      out.write("	            <li><a href=\"/shop/shop01\">둘러보기</a></li>\r\n");
      out.write("          		");

          	}else{
          		
      out.write("\r\n");
      out.write("	            <li style=\"width:200px;\"><a href=\"/mypage/mypage01\">");
      out.print(cMgr.getNickName(userId));
      out.write("님<br /> 환영합니다.</a></li>\r\n");
      out.write("	            <li><a href=\"/login/logout\">회원가입</a></li>\r\n");
      out.write("	            <li>\r\n");
      out.write("	              <a href=\"/mypage/mypage01\">\r\n");
      out.write("	                마이페이지\r\n");
      out.write("	                <span class=\"arrow\"></span>\r\n");
      out.write("	              </a>\r\n");
      out.write("	              <ul class=\"myPageList\">\r\n");
      out.write("	                <li><a href=\"/mypage/mypage01\">구매목록</a></li>\r\n");
      out.write("	                <li><a href=\"/mypage/mypage02\">취소/반품내역</a></li>\r\n");
      out.write("	                <li><a href=\"/mypage/mypage03\">회원정보수정</a></li>\r\n");
      out.write("	                <li><a href=\"/mypage/mypage04\">내가 쓴 글</a></li>\r\n");
      out.write("	                <li><a href=\"/mypage/mypage05\">장바구니/관심목록</a></li>\r\n");
      out.write("	              </ul>\r\n");
      out.write("	            </li>\r\n");
      out.write("	            <li><a href=\"/login/logout\">로그아웃</a></li>\r\n");
      out.write("          		");

          	}
          	
      out.write("\r\n");
      out.write("          </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"headMiddle\">\r\n");
      out.write("\r\n");
      out.write("        <h1>은하수책방</h1>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"searchFrame\">\r\n");
      out.write("          <p class=\"searchId\">\r\n");
      out.write("            <span class=\"searchCat\">통합검색</span> <i class=\"fa-solid fa-chevron-down\"></i>\r\n");
      out.write("          </p>\r\n");
      out.write("          <form name=\"bookSearchFrm\" autocomplete=\"off\">\r\n");
      out.write("          	<input type=\"text\" name=\"bookSearch\" />\r\n");
      out.write("          	<button type=\"submit\" style=\"display:none;\">검색</button>\r\n");
      out.write("          </form>\r\n");
      out.write("          <span onclick=\"search()\" class=\"search visible\">검색</span>\r\n");
      out.write("          <span class=\"close\">닫기</span>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        <ul class=\"searchedList\">\r\n");
      out.write("\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        <ul class=\"searchList\">\r\n");
      out.write("          <li>통합검색</li>\r\n");
      out.write("          <li>국내도서</li>\r\n");
      out.write("          <li>해외도서</li>\r\n");
      out.write("          <li>eBook</li>\r\n");
      out.write("        </ul>\r\n");
      out.write("\r\n");
      out.write("        <img class=\"logo\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/images/Logo.jpg\" alt=\"로고이미지\" />\r\n");
      out.write("      </div>\r\n");
      out.write("    </header>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("      const $search = document.querySelector('.searchFrame>.search');\r\n");
      out.write("      const $close = document.querySelector('.searchFrame>.close');\r\n");
      out.write("      const $searchedList = document.querySelector('.headMiddle>.searchedList');\r\n");
      out.write("      const $searchFrame = document.querySelector('.headMiddle>.searchFrame');\r\n");
      out.write("\r\n");
      out.write("      // 출력된 데이터를 닫는 함수\r\n");
      out.write("      const close = ()=>{\r\n");
      out.write("        const $searchedListItems = document.querySelectorAll('.searchedList>li');\r\n");
      out.write("          for(let i=0;i<$searchedListItems.length;i++) {\r\n");
      out.write("            $searchedList.removeChild($searchedListItems[i]);\r\n");
      out.write("          }\r\n");
      out.write("          $searchFrame.classList.remove('searched');\r\n");
      out.write("          $close.classList.remove('visible');\r\n");
      out.write("          $search.classList.add('visible');\r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("      //전송받은 데이터를 기반으로 화면에 검색결과를 표시하는 엘리먼트를 생성 추가\r\n");
      out.write("      const addSearchedListItem = (data)=>{\r\n");
      out.write("\r\n");
      out.write("        // 새로운 검색결과를 반영하기 전 초기화\r\n");
      out.write("        const $searchedListItems = document.querySelectorAll('.searchedList>li');\r\n");
      out.write("        for(let i=0;i<$searchedListItems.length;i++) {\r\n");
      out.write("          $searchedList.removeChild($searchedListItems[i]);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 검색결과가 없을때\r\n");
      out.write("        if(data.length===0) {\r\n");
      out.write("          // alert('검색결과가 없습니다');\r\n");
      out.write("          $searchFrame.classList.remove('searched');\r\n");
      out.write("\r\n");
      out.write("          const $li = document.createElement('li');\r\n");
      out.write("          const $p  = document.createElement('p');\r\n");
      out.write("          $p.textContent = \"검색결과가 없습니다\";\r\n");
      out.write("          $li.appendChild($p);\r\n");
      out.write("          $searchedList.appendChild($li);\r\n");
      out.write("          $close.classList.add('visible');\r\n");
      out.write("          $search.classList.remove('visible');\r\n");
      out.write("\r\n");
      out.write("          // 검색결과 출력 후 검색결과를 닫는 이벤트리스너 추가\r\n");
      out.write("          $close.addEventListener('click',()=>{\r\n");
      out.write("            close();\r\n");
      out.write("          });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //새로운 검색결과를 화면에 출력(요소 생성 및 추가)\r\n");
      out.write("        for(let i=0;i<data.length;i++) {\r\n");
      out.write("          const bookid = data[i].bookid;\r\n");
      out.write("          const title = data[i].title;\r\n");
      out.write("          const author = data[i].author;\r\n");
      out.write("          const genre = data[i].genre;\r\n");
      out.write("\r\n");
      out.write("          const $li = document.createElement('li');\r\n");
      out.write("          const $a  = document.createElement('a');\r\n");
      out.write("          const $image = document.createElement('img');\r\n");
      out.write("          const $title = document.createElement('p');\r\n");
      out.write("          const $author = document.createElement('p');\r\n");
      out.write("          const $genre = document.createElement('p');\r\n");
      out.write("\r\n");
      out.write("          $a.setAttribute('href','/shop/shop02?bookid=' + bookid);\r\n");
      out.write("          $image.setAttribute('src','/image?bookid=' + bookid);\r\n");
      out.write("          $image.setAttribute('alt', title);\r\n");
      out.write("          $title.textContent = title;\r\n");
      out.write("          $title.classList.add('title');\r\n");
      out.write("          $author.textContent = author;\r\n");
      out.write("          $author.classList.add('author');\r\n");
      out.write("          $genre.textContent = genre;\r\n");
      out.write("          $genre.classList.add('genre');\r\n");
      out.write("\r\n");
      out.write("          $a.append($image,$title,$author,$genre);\r\n");
      out.write("          $li.appendChild($a);\r\n");
      out.write("          $searchedList.appendChild($li);\r\n");
      out.write("\r\n");
      out.write("          $close.classList.add('visible');\r\n");
      out.write("          $search.classList.remove('visible');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 새롭게 추가된 검색결과링크에 이벤트리스너 추가(클릭시 스타일 초기화)\r\n");
      out.write("        // 페이지 이동 후 뒤로가기 시에도 초기화된 화면 출력\r\n");
      out.write("        const $addedAs = document.querySelectorAll('.searchedList>li>a');\r\n");
      out.write("        $addedAs.forEach(($addedA)=>{\r\n");
      out.write("          $addedA.addEventListener('click',()=>{\r\n");
      out.write("            const $searchedListItems = document.querySelectorAll('.searchedList>li');\r\n");
      out.write("            for(let i=0;i<$searchedListItems.length;i++) {\r\n");
      out.write("              $searchedList.removeChild($searchedListItems[i]);\r\n");
      out.write("            }\r\n");
      out.write("            $searchFrame.classList.remove('searched');\r\n");
      out.write("            $close.classList.remove('visible');\r\n");
      out.write("            $search.classList.add('visible');\r\n");
      out.write("          });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 검색결과 출력 후 검색결과를 닫는 이벤트리스너 추가\r\n");
      out.write("        $close.addEventListener('click',()=>{\r\n");
      out.write("          close();\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 검색결과 출력에 맞는 스타일 적용\r\n");
      out.write("        $searchFrame.classList.add('searched');\r\n");
      out.write("      };//addSearchedListItem = (data)=>{}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      //DB 웹서블릿 검색 API fetch요청을 통한 검색 정보 수신\r\n");
      out.write("	    async function search() {\r\n");
      out.write("	        const subject = document.querySelector(\"input[name=bookSearch]\").value;\r\n");
      out.write("	        const searchCat = document.querySelector(\".searchId>.searchCat\").textContent;\r\n");
      out.write("\r\n");
      out.write("	        if (subject == null || subject.trim() === \"\") {\r\n");
      out.write("	            alert(\"검색하실 내용을 입력해주세요.\");\r\n");
      out.write("	            document.bookSearchFrm.bookSearch.focus();\r\n");
      out.write("	            return;\r\n");
      out.write("	        }else{\r\n");
      out.write("		        try {\r\n");
      out.write("		            // fetch를 사용하여 GET 요청을 서블릿으로 전송\r\n");
      out.write("		            const response = await fetch('/searchDB?subject=' + encodeURIComponent(subject) + '&searchCat=' + encodeURIComponent(searchCat));\r\n");
      out.write("		            \r\n");
      out.write("                // 작가이름, 책제목 기준으로 반환 된 검색결과 JSON형식으로 역직렬화\r\n");
      out.write("                const data = await response.json();\r\n");
      out.write("                /* 반환데이터 예시\r\n");
      out.write("                [\r\n");
      out.write("                    {\r\n");
      out.write("                        \"bookid\": 16,\r\n");
      out.write("                        \"author\": \"어니스트 헤밍웨이\",\r\n");
      out.write("                        \"genre\": \"모험\",\r\n");
      out.write("                        \"title\": \"노인과 바다\",\r\n");
      out.write("                        \"score\": 0,\r\n");
      out.write("                        \"stock_Quantity\": 0,\r\n");
      out.write("                        \"price\": 0,\r\n");
      out.write("                        \"pages\": 0\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        \"bookid\": 20,\r\n");
      out.write("                        \"author\": \"제인 오스틴\",\r\n");
      out.write("                        \"genre\": \"로맨스\",\r\n");
      out.write("                        \"title\": \"오만과 편견\",\r\n");
      out.write("                        \"score\": 0,\r\n");
      out.write("                        \"stock_Quantity\": 0,\r\n");
      out.write("                        \"price\": 0,\r\n");
      out.write("                        \"pages\": 0\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        \"bookid\": 26,\r\n");
      out.write("                        \"author\": \"정미경\",\r\n");
      out.write("                        \"genre\": \"성장소설\",\r\n");
      out.write("                        \"title\": \"내 인생의 스프링캠프\",\r\n");
      out.write("                        \"score\": 0,\r\n");
      out.write("                        \"stock_Quantity\": 0,\r\n");
      out.write("                        \"price\": 0,\r\n");
      out.write("                        \"pages\": 0\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        \"bookid\": 31,\r\n");
      out.write("                        \"author\": \"김애란\",\r\n");
      out.write("                        \"genre\": \"가족소설\",\r\n");
      out.write("                        \"title\": \"두근두근 내 인생\",\r\n");
      out.write("                        \"score\": 0,\r\n");
      out.write("                        \"stock_Quantity\": 0,\r\n");
      out.write("                        \"price\": 0,\r\n");
      out.write("                        \"pages\": 0\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        \"bookid\": 39,\r\n");
      out.write("                        \"author\": \"오에 겐자부로\",\r\n");
      out.write("                        \"genre\": \"철학소설\",\r\n");
      out.write("                        \"title\": \"개인적인 체험\",\r\n");
      out.write("                        \"score\": 0,\r\n");
      out.write("                        \"stock_Quantity\": 0,\r\n");
      out.write("                        \"price\": 0,\r\n");
      out.write("                        \"pages\": 0\r\n");
      out.write("                    }\r\n");
      out.write("                ]\r\n");
      out.write("                */\r\n");
      out.write("\r\n");
      out.write("                addSearchedListItem(data);\r\n");
      out.write("\r\n");
      out.write("		            $bookSearchFrm.reset(); //검색어초기화\r\n");
      out.write("		        } catch (error) {\r\n");
      out.write("		            console.error('API 작동에 실패하였습니다.:', error);\r\n");
      out.write("		        }\r\n");
      out.write("	        }//if(subject==null || subject==\"\")~else\r\n");
      out.write("	    }// async function search()\r\n");
      out.write("\r\n");
      out.write("	    // form태그의 submit이벤트(엔터,서브밋버튼 클릭) 발생시 서브밋이벤트 발생방지\r\n");
      out.write("      // DB검색 API 함수 실행\r\n");
      out.write("	    const $bookSearchFrm = document.querySelector(\"form[name=bookSearchFrm]\");\r\n");
      out.write("	    $bookSearchFrm.addEventListener('submit', (evt) => {\r\n");
      out.write("	        evt.preventDefault(); // 기본 제출 방지\r\n");
      out.write("	        search(); // 검색 함수 호출\r\n");
      out.write("	    });//$bookSearchFrm.addEventListener\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      // 검색 카테고리 선택시 선택한 카테고리네임 반영\r\n");
      out.write("      const $searchItems = document.querySelectorAll(\".searchList>li\");\r\n");
      out.write("      const $searchCat = document.querySelector(\".searchId>.searchCat\");\r\n");
      out.write("      $searchItems.forEach(($searchItem)=>{\r\n");
      out.write("        $searchItem.addEventListener('click',()=>{\r\n");
      out.write("          $searchCat.textContent = $searchItem.textContent;\r\n");
      out.write("        });\r\n");
      out.write("      });//$searchItems.forEach(($searchItem)\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		// 스크롤 감지 헤더 노출\r\n");
      out.write("		const $header = document.querySelector('header');\r\n");
      out.write("		\r\n");
      out.write("		let lastScroll = document.documentElement.scrollTop || 0;\r\n");
      out.write("		\r\n");
      out.write("		window.addEventListener('scroll', ()=>{\r\n");
      out.write("		  let nowScroll = document.documentElement.scrollTop;\r\n");
      out.write("		  const scrollTop = Math.ceil(window.scrollY);\r\n");
      out.write("		\r\n");
      out.write("		  // 헤더 - 스크롤 시 세로스크롤만 상단 fixed\r\n");
      out.write("		  $header.style.top = scrollTop + 'px';\r\n");
      out.write("		\r\n");
      out.write("		  // 스크롤감지헤더\r\n");
      out.write("		  if(nowScroll > lastScroll) { // 스크롤 다운\r\n");
      out.write("		    // 헤더탑 숨김\r\n");
      out.write("		    $header.classList.add('scrolled');\r\n");
      out.write("		  } else { // 스크롤 업\r\n");
      out.write("		    // 헤더탑 보임\r\n");
      out.write("		    $header.classList.remove('scrolled');\r\n");
      out.write("		  }\r\n");
      out.write("		  \r\n");
      out.write("		  lastScroll = nowScroll;\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
