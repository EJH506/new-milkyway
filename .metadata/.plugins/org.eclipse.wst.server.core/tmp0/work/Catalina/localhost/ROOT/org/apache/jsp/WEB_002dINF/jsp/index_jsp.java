/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-12-06 09:05:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import beans.BookBean;
import beans.BoardBean;
import java.util.Vector;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(11);
    _jspx_imports_classes.add("beans.BookBean");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("beans.BoardBean");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      index.IndexMgr iMgr = null;
      iMgr = (index.IndexMgr) _jspx_page_context.getAttribute("iMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (iMgr == null){
        iMgr = new index.IndexMgr();
        _jspx_page_context.setAttribute("iMgr", iMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");

	String userId = (String) session.getAttribute("idKeyS");
	if (userId == null) {
		/*
	    자바스크립트에서 인식하는 null과 자바에서 인식하는 null이 서로 다른듯 함
	    자바의 null값을 자바스크립트 함수에 <%= 형태로 넣을 경우 문자열 "null"로 변환되어 
	    실제 자바스크립트 함수에서는 유효성 검사를 진행하지 못함
		*/
	    userId = ""; // userId가 null인 경우 빈 문자열로 초기화
	}

	int ranCount = 0;
	String category = null;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("  <title>BookAbout</title>\r\n");
      out.write("	\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/reset.css?after\" />\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/index.css?after\" />\r\n");
      out.write("  <script defer src=\"https://kit.fontawesome.com/9ad59cd5cc.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("  <script defer src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/index.js?after\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("  <div id=\"wrap\">\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/header.jsp", out, false);
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <section>\r\n");
      out.write("      <div class=\"recommendSlide\">\r\n");
      out.write("        <p class=\"frame\">\r\n");
      out.write("          <video src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/images/bookabout.mp4\" autoplay loop muted style=\"width: 1200px; height: auto;\"></video>\r\n");
      out.write("          <video src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/images/modernCafe.mp4\" autoplay loop muted style=\"width: 1200px; height: auto;\"></video>\r\n");
      out.write("        </p>\r\n");
      out.write("        <a href=\"#\" class=\"prev\">&lt;</a>\r\n");
      out.write("        <a href=\"#\" class=\"next\">&gt;</a>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"bestSlide\">\r\n");
      out.write("	  <h2><a href=\"shop/shop01?category=국내도서\">국내도서 <span>바로가기</span></a></h2>\r\n");
      out.write("		");

		// 국내도서 총 갯수중 랜덤 5개 추출
		category = "국내도서";
		ranCount = iMgr.getCatCount(category);
		int[] ranList = new int[5];
		
		for (int i = 0; i < 5; i++) {
		    int ranId;
		    boolean flag;
		
		    do {
		        flag = false;
		        ranId = (int) Math.floor(Math.random() * ranCount) + 1;
		
		        // 중복 확인
		        for (int j = 0; j < i; j++) {
		            if (ranList[j] == ranId) {
		            	flag = true; // 중복이면 true로 설정
		                break;
		            }
		        }
		    } while (flag); // 중복이면 다시 랜덤 생성
		
		    ranList[i] = ranId; // 중복이 없으면 ID 저장
		    BookBean ranBBean = iMgr.getRanBook(ranId - 1, category);
			
      out.write("\r\n");
      out.write("	        <div class=\"bookCard\">\r\n");
      out.write("				<img src=\"/image?bookid=");
      out.print(ranBBean.getBookid());
      out.write("\" alt=\"");
      out.print( ranBBean.getTitle() );
      out.write("\">\r\n");
      out.write("				<a href=\"shop/shop02?bookid=");
      out.print( ranBBean.getBookid() );
      out.write("\">\r\n");
      out.write("				    <h3 class=\"title\">");
      out.print( ranBBean.getTitle() );
      out.write("</h3>\r\n");
      out.write("				    <p class=\"author\">");
      out.print( ranBBean.getAuthor() );
      out.write("</p>\r\n");
      out.write("				</a>\r\n");
      out.write("			    <span class=\"pointer\">\r\n");
      out.write("			        <i class=\"fa-solid fa-ellipsis-vertical\"></i>\r\n");
      out.write("			        <i class=\"fa-solid fa-x\"></i>\r\n");
      out.write("			    </span>\r\n");
      out.write("			    <div class=\"addCartContainer\">\r\n");
      out.write("	        		<p class=\"addToCart\" onClick=\"addToCart('");
      out.print(userId);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(ranBBean.getBookid());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(ranBBean.getTitle());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(i);
      out.write("')\">장바구니에 추가</p>\r\n");
      out.write("			    </div>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

		}
		
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("	  \r\n");
      out.write("      \r\n");
      out.write("      <div class=\"bestSlide\">\r\n");
      out.write("   	  <h2><a href=\"shop/shop01?category=해외도서\">해외도서 <span>바로가기</span></a></h2>\r\n");
      out.write("		");

		// 국내도서 총 갯수중 랜덤 5개 추출
		category = "해외도서";
		ranCount = iMgr.getCatCount(category);
		
		for (int i = 0; i < 5; i++) {
		    int ranId;
		    boolean flag;
		
		    do {
		        flag = false;
		        ranId = (int) Math.floor(Math.random() * ranCount) + 1;
		
		        // 중복 확인
		        for (int j = 0; j < i; j++) {
		            if (ranList[j] == ranId) {
		            	flag = true; // 중복이면 true로 설정
		                break;
		            }
		        }
		    } while (flag); // 중복이면 다시 랜덤 생성
		
		    ranList[i] = ranId; // 중복이 없으면 ID 저장
		    BookBean ranBBean = iMgr.getRanBook(ranId - 1, category);
			
      out.write("\r\n");
      out.write("	        <div class=\"bookCard\">\r\n");
      out.write("				<img src=\"/image?bookid=");
      out.print(ranBBean.getBookid());
      out.write("\" alt=\"");
      out.print( ranBBean.getTitle() );
      out.write("\">\r\n");
      out.write("				<a href=\"shop/shop02?bookid=");
      out.print( ranBBean.getBookid() );
      out.write("\">\r\n");
      out.write("				    <h3 class=\"title\">");
      out.print( ranBBean.getTitle() );
      out.write("</h3>\r\n");
      out.write("				    <p class=\"author\">");
      out.print( ranBBean.getAuthor() );
      out.write("</p>\r\n");
      out.write("				</a>\r\n");
      out.write("			    <span class=\"pointer\">\r\n");
      out.write("			        <i class=\"fa-solid fa-ellipsis-vertical\"></i>\r\n");
      out.write("			        <i class=\"fa-solid fa-x\"></i>\r\n");
      out.write("			    </span>\r\n");
      out.write("			    <div class=\"addCartContainer\">\r\n");
      out.write("	        		<p class=\"addToCart\" onClick=\"addToCart('");
      out.print(userId);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(ranBBean.getBookid());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(ranBBean.getTitle());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(i+5);
      out.write("')\">장바구니에 추가</p>\r\n");
      out.write("			    </div>\r\n");
      out.write("			</div>\r\n");
      out.write("			");

		}
		
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"boardContainer\">\r\n");
      out.write("\r\n");
      out.write("        <div class=\"latestBoard\">\r\n");
      out.write("          <h3><a href=\"/board/board01\">최신 게시물<span>더보기</span></a></h3>\r\n");
      out.write("          <ul class=\"latestBoardList\">\r\n");
      out.write("	          ");

	          Vector<BoardBean> latestList = iMgr.getLastBoardList();
	          
	          for(int i=0; i<latestList.size(); i++) {
	        	  BoardBean bean = latestList.get(i);
	        	  
      out.write("\r\n");
      out.write("	        	  <li id=\"latest0");
      out.print( i );
      out.write("\">\r\n");
      out.write("		        	  <a href=\"/board/board02?num=");
      out.print( bean.getBoardid() );
      out.write('"');
      out.write('>');
      out.print( bean.getContent() );
      out.write("</a>\r\n");
      out.write("		        	  <span class=\"author\">");
      out.print( bean.getNickname() );
      out.write("</span>\r\n");
      out.write("	        	  </li>\r\n");
      out.write("	        	  ");

	          }
	          
      out.write("\r\n");
      out.write("          </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        <div class=\"bestBoard\">\r\n");
      out.write("          <h3><a href=\"/board/board01?nowPage=1&tab=인기\">인기 게시물<span>더보기</span></a></h3>\r\n");
      out.write("          <ul class=\"bestBoardList\">\r\n");
      out.write("	          ");

	          Vector<BoardBean> bestList = iMgr.getBestBoardList();
	          
	          for(int i=0; i<bestList.size(); i++) {
	        	  BoardBean bean = bestList.get(i);
	        	  
      out.write("\r\n");
      out.write("	        	  <li id=\"best0");
      out.print( i );
      out.write("\">\r\n");
      out.write("		        	  <a href=\"/board/board02?num=");
      out.print( bean.getBoardid() );
      out.write('"');
      out.write('>');
      out.print( bean.getContent() );
      out.write("</a>\r\n");
      out.write("		        	  <span class=\"author\">");
      out.print( bean.getNickname() );
      out.write("</span>\r\n");
      out.write("	        	  </li>\r\n");
      out.write("	        	  ");

	          }
	          
      out.write("\r\n");
      out.write("          </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/aside.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
